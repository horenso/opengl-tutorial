diff --git a/src/main.cpp b/src/main.cpp
index 4b8bcb7..368300c 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -10,22 +10,27 @@ void processInput(GLFWwindow* window);
 const unsigned int SCR_WIDTH = 800;
 const unsigned int SCR_HEIGHT = 600;
 
 const char* vertexShaderSource =
     "#version 460 core\n"
     "layout (location = 0) in vec3 aPos;\n"
+    "layout (location = 1) in vec3 aCol;\n"
+    "out vec3 outCol;\n"
     "void main()\n"
     "{\n"
     "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
+    "   outCol = aCol;\n"
     "}\n";
 const char* fragmentShaderSource =
     "#version 460 core\n"
+    "in vec3 outCol;\n"
     "out vec4 FragColor;\n"
+    "uniform float uTime;\n"
     "void main()\n"
     "{\n"
-    "   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
+    "   FragColor = vec4(outCol.x * uTime, outCol.y * uTime, outCol.z * uTime, 1.0f);\n"
     "}\n";
 
 int main() {
     ///////////////////////////////////////////////////////////////////////////
     // Init OpenGL, Windowing etc.
     ///////////////////////////////////////////////////////////////////////////
@@ -87,41 +92,64 @@ int main() {
 
     ///////////////////////////////////////////////////////////////////////////
     // Prepare Buffers
     ///////////////////////////////////////////////////////////////////////////
     float vertices[] = {-0.5f, -0.5f, 0.0f, 0.5f, -0.5f,
                         0.0f,  0.0f,  0.5f, 0.0f};
+    float colors[] = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 
-    unsigned int VBO, VAO;
-    glCreateBuffers(1, &VBO);
+    unsigned int VBO_pos, VBO_col, VAO;
+    glCreateBuffers(1, &VBO_pos);
+    glCreateBuffers(1, &VBO_col);
     glCreateVertexArrays(1, &VAO);
-    glNamedBufferData(VBO, sizeof(vertices), vertices, GL_STATIC_DRAW);
-    glVertexArrayVertexBuffer(VAO, 0, VBO, 0, 3 * sizeof(float));
+
+    glNamedBufferData(VBO_pos, sizeof(vertices), vertices, GL_STATIC_DRAW);
+    glVertexArrayVertexBuffer(VAO, 0, VBO_pos, 0, 3 * sizeof(float));
     glVertexArrayAttribFormat(VAO, 0, 3, GL_FLOAT, GL_FALSE, 0);
     glEnableVertexArrayAttrib(VAO, 0);
     glVertexArrayAttribBinding(VAO, 0, 0);
 
+    glNamedBufferData(VBO_col, sizeof(colors), colors, GL_STATIC_DRAW);
+    glVertexArrayVertexBuffer(VAO, 1, VBO_col, 0, 3 * sizeof(float));
+    glVertexArrayAttribFormat(VAO, 1, 3, GL_FLOAT, GL_FALSE, 0);
+    glEnableVertexArrayAttrib(VAO, 1);
+    glVertexArrayAttribBinding(VAO, 1, 1);
+
     ///////////////////////////////////////////////////////////////////////////
     // Main Loop
     ///////////////////////////////////////////////////////////////////////////
+    float time = 0;
+    bool increase = true;
+
     while (!glfwWindowShouldClose(window)) {
         processInput(window);
 
         glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
         glClear(GL_COLOR_BUFFER_BIT);
 
+        if (increase) {
+            time += 0.01f;
+            increase = time <= 1.0f;
+        } else {
+            time -= 0.01f;
+            increase = time <= 0.0f;
+        }
+
         glUseProgram(shaderProgram);
+        GLuint timeLocation = glGetUniformLocation(shaderProgram, "uTime");
+        glUniform1f(timeLocation, time);
         glBindVertexArray(VAO);
         glDrawArrays(GL_TRIANGLES, 0, 3);
 
         glfwSwapBuffers(window);
         glfwPollEvents();
     }
 
     glDeleteVertexArrays(1, &VAO);
-    glDeleteBuffers(1, &VBO);
+    glDeleteBuffers(1, &VBO_pos);
+    glDeleteBuffers(1, &VBO_col);
     glDeleteProgram(shaderProgram);
 
     glfwTerminate();
     return 0;
 }
 
